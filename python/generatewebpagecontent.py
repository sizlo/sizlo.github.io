import parsealbumfolder
import sys
import os


def indentBy(html, spaces):
    spacesString = ""
    for i in range(0, spaces):
        spacesString += " "
    indentedHtml = ""
    lines = html.splitlines()
    for line in lines:
        indentedHtml += spacesString + line + "\n"
    return indentedHtml[:-1] # To strip last newline

def getGeneratedHtmlComment():
    return "<!-- Generated by " + os.path.basename(__file__) + " -->"

def getImageHtml(path):
    # Link to the full size image
    pathWithoutExtension = os.path.splitext(path)[0]
    extension = os.path.splitext(path)[1]
    fullSizePath = pathWithoutExtension + "_full" + extension
    return "<a href=\"" + fullSizePath + "\"><img src=\"" + path + "\" title=\"Click for full size\" /></a>"

def generateAlbumPage(albumData, path):
    imageListHtml = ""
    for imageData in albumData["images"]:
        imageTitleHtml = ""
        if "title" in imageData:
            imageTitleHtml = "  <h2>" + imageData["title"] + "</h2>\n"
        imageDescriptionHtml = ""
        if "description" in imageData:
            imageDescriptionHtml = "  <p>" + imageData["description"] + "</p>\n"
        imageListHtml += "<div class=\"image\">\n"
        imageListHtml += "  " + getImageHtml(imageData["path"]) + "\n"
        imageListHtml += imageTitleHtml
        imageListHtml += imageDescriptionHtml
        imageListHtml += "</div>\n\n"
    imageListHtml = imageListHtml[:-1] # To strip last newline

    htmlContent = getGeneratedHtmlComment() + "\n"
    htmlContent += "<html>\n"
    htmlContent += "  <head>\n"
    htmlContent += "    <title>" + albumData["title"] + "</title>\n"
    htmlContent += "    <link rel=\"stylesheet\" type=\"text/css\" href=\"../../css/buildalbum.css\">\n"
    htmlContent += "    <meta charset=\"utf-8\" />\n"
    htmlContent += "  </head>\n"
    htmlContent += "\n"
    htmlContent += "  <body>\n"
    htmlContent += "    <div class=\"albumintro\">\n"
    htmlContent += "      <h1>" + albumData["title"] + "</h1>\n"
    htmlContent += "      <p>" + albumData["description"] + "</p>\n"
    htmlContent += "      " + getImageHtml(albumData["coverimagepath"]) + "\n"
    htmlContent += "    </div>\n"
    htmlContent += "\n"
    htmlContent += "    <div class=\"album\">\n"
    htmlContent += indentBy(imageListHtml, 6) + "\n"
    htmlContent += "    </div>\n"
    htmlContent += "\n"
    htmlContent += "  </body>\n"
    htmlContent += "</html>\n"

    with open(path + "/index.html", "w") as htmlFile:
        print "Writing " + path + "/index.html"
        htmlFile.write(htmlContent.encode("utf-8"))


def generateBuildHtmlForHome(buildData, relativepath):
    htmlContent =   "<div class=\"build\">\n"
    htmlContent += "  <a href=\"" + relativepath + "\">\n"
    htmlContent += "    <h3>" + buildData["title"] + "</h3>\n"
    htmlContent += "    <img src=\"" + relativepath + "/" + buildData["coverimagepath"] + "\" />\n"
    htmlContent += "  </a>\n"
    htmlContent += "</div>\n"
    return htmlContent

def main():
    # Find the builds folder
    scriptDirectoryPath = os.path.dirname(os.path.realpath(__file__)) + "/"
    websiteRoot = scriptDirectoryPath + "../"
    buildsDirectory = websiteRoot + "builds/"

    # The builds list html we'll populate for the homepage
    homepageBuildsHtml =  "<!-- builds div start -->\n"
    homepageBuildsHtml += getGeneratedHtmlComment() + "\n"
    homepageBuildsHtml += "<div class=\"builds\">\n"
    homepageBuildsHtml += "  <h3>Things I've built</h3>\n"

    # For every build in the builds factory, generate an album page for it
    # and generate a link to it on the homepage
    for subpath in os.listdir(buildsDirectory):
        path = buildsDirectory + subpath
        if os.path.isdir(path):
            albumJsonPath = path + "/album.json"
            if os.path.isfile(albumJsonPath):
                buildData = parsealbumfolder.parseAlbumFolder(path)
                if buildData == None:
                    print "Problem parsing folder " + path
                    print "Skipping"
                    continue
                generateAlbumPage(buildData, path)
                relativePathFromWebsiteRoot = path.replace(websiteRoot, "")
                homepageBuildsHtml += indentBy(generateBuildHtmlForHome(buildData, relativePathFromWebsiteRoot), 2) + "\n\n"

    homepageBuildsHtml = homepageBuildsHtml[:-1] # To remove last newline
    homepageBuildsHtml += "</div>\n"
    homepageBuildsHtml += "<!-- builds div end -->\n"

    
    # Inject the builds list html into the home page
    homepageHtml = ""
    with open(websiteRoot + "/index.html") as homepageFile:
        homepageContent = homepageFile.read()
        homepageLines = homepageContent.splitlines()
        inBuildsDiv = False
        for line in homepageLines:
            if "<!-- builds div start -->" in line:
                inBuildsDiv = True
                homepageHtml += indentBy(homepageBuildsHtml, 6) + "\n"
            elif "<!-- builds div end -->" in line:
                inBuildsDiv = False
            elif not inBuildsDiv:
                homepageHtml += line + "\n"
    with open(websiteRoot + "/index.html", "w") as homepageFile:
        print "Updating " + websiteRoot + "/index.html"
        homepageFile.write(homepageHtml)


main()

